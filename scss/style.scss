// 1) VARIABILI SASS (vedi partial _variables.scss)

@import "./partials/variables";
@import "./partials/mixins";

body {
  margin: $margin-0;
}

// header {
//   background-color: yellow;
//   color: coral;
//   padding: 2rem;
//   border: 3px solid black;
// }

// footer {
//   background-color: $main-color;
// }

// 2) NESTING (o annidamento) dei selettori CSS

// header {
//   font-size: 1.4rem;
// }

// header > div {
// padding: 2rem;
// border: 2px solid $main-color;
// }

// header > div > ul {
//   background-color: antiquewhite;
// }

// header > div > ul li {
//   font-weight: 600;
// }

// header > div > ul li::marker {
//   content: "üöÄ";
// }

header {
  font-size: 1.4rem;

  // media query integrate nel selettore che non necessitano della ripetizione del selettore a cui applicare la regola

  > div {
    padding: 2rem;
    border: 2px solid $main-color;

    > ul {
      background-color: antiquewhite;

      li {
        font-weight: 600;

        // parent selector (riprende il selettore del genitore senza doverlo riscrivere)
        &::marker {
          content: "üöÄ";
        }

        &:hover {
          text-decoration: underline;
          cursor: pointer;
        }
      }
    }

    button {
      background-color: red;
    }
  }

  @media screen and (max-width: 575px) {
    // il selettore header verrr√† applicato in automatico
    font-size: 0.8rem;

    li {
      // effetto anche sul figlio li
    }
  }
}

main {
  @media screen and (max-width: 575px) {
    color: red;
  }
}

// 2b) Parent selector (&)

// 2c) Media query integrate nel selettore
// (vedi sopra)

.main-title {
  font: {
    family: "Verdana", sans-serif;
    weight: 300;
    size: 36px;
  }

  letter-spacing: -1.5px;
  color: scale-color($body-color, $lightness: 30%, $alpha: -50%);

  &::before {
    content: "üëâ";
  }
}

.section-title {
  // font-family: "Courier New", Courier, monospace;
  // font-size: 2rem;

  // propriet√† composte
  font: {
    family: "Courier New", Courier, monospace;
    size: 2rem;
  }

  &:hover {
    color: aqua;

    span {
      color: red;
    }
  }
}

main section {
  counter-increment: mySectionCounter;
  padding-inline-start: 1rem;

  h3 {
    font-weight: 100;

    &::before {
      content: counter(mySectionCounter) ") ";
    }
  }
}

// 3) EXTEND (@extend) - √® in grando di riprendere un blocco di CSS di una id/classe/tag definita in precedenza

.main-title-alt {
  @extend .main-title;
  font-size: 26px;
  color: $main-color;
}

// 4) PLACEHOLDER (%nomePlaceholder) - serve ad incorporare un blocco CSS che da solo non verr√† mai renderizzato
// rispetto ad estenere elementi esistenti, sar√† un blocco che esister√† solo nel momento in cui verr√† utilizzato dentro una definizione di qualche tipo (id/class/element)

%main-btn {
  background-color: scale-color($btn-color, $blackness: 60%);
  color: white;
  padding: 0.25rem 0.75rem;
  border: 2px solid red;
  border-radius: 6px;
}

.btn-1 {
  @extend %main-btn;
  border-color: $btn-color;
}
.btn-2 {
  @extend %main-btn;
  border-color: adjust-hue($btn-color, 60deg);
}
.btn-3 {
  @extend %main-btn;
  border-color: adjust-hue($btn-color, 120deg);
}

// 5) MIXINS - blocco di codice ceh pu√≤ generarsi anche a partire da valori (o parametri) dinamici
// vedi partial (_mixins.scss)

.box-1 {
  @include customBox($main-color, 6px, 2px);
}
.box-2 {
  @include customBox($btn-color, 2px);
}
.box-3 {
  @include customBox($radius: 0px);
  // applicato l'unico parametro obbligatorio, il primo e l'ultimo faranno riferimento al loro valore default
}

// 6) INTERPOLAZIONE DI VALORE #{} (ricorda molto l'interpolazione di valore dentro a template string in JS)

.box-4 {
  @include dynamicBox(300px, palegoldenrod, color);
}
.box-5 {
  @include dynamicBox(300px, url(https://images.unsplash.com/photo-1682686581663-179efad3cd2f?auto=format&fit=crop&q=80&w=2070&ixlib=rb-4.0.3&ixid=M3wxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D), image);
}
.box-6 {
  @include dynamicBox(100px, url(https://images.unsplash.com/photo-1698692937363-7eaf265c7d3f?auto=format&fit=crop&q=80&w=1974&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D), image);
}

// 7) CICLO FOR

// @for $contatore from 0 to 5 ==> <start> to <end>  dove "to" rappresenta il valore con <end> ESCLUSO
// @for $contatore from 0 through 5 ==> <start> through <end>  dove "through" rappresenta il valore con <end> INCLUSO

@for $i from 1 through 5 {
  .custom-ps-#{$i} {
    padding-inline-start: $i * 10px;
  }
}

// 8) CICLO EACH

// datatype di tipo Lista (list)
$colorValues: red, green, blue, yellow, purple, orange;

// la variabile $el acquisir√† come valore uno dei colori della lista, uno dopo l'altro
@each $el in $colorValues {
  .box-#{$el} {
    background-color: $el;
  }
}

// datatype di tipo Map (chiave-valore)

$sizes: (
  xs: 10px,
  sm: 20px,
  md: 30px,
  lg: 50px,
  xl: 100px
);
// nel caso delle mappe ci servono due variabili, una per la chiave e una per il valore degli elementi della mappa
// n.b. se usassimo un solo valore chiamato $elem per esempio, saremmo solo in grado di ricevere la chiave e non avremmo accesso al valore

// questo generer√† 5 classi con padding-inline-*
@each $key, $value in $sizes {
  .padding-inline-#{$key} {
    padding-inline: $value;
  }
}
// questo generer√† 5 classi con padding-block-*
@each $key, $value in $sizes {
  .padding-block-#{$key} {
    padding-block: $value;
  }
}

// 9) FUNZIONI - a differenza dei mixins, una funzione in SASS √® pensata per ritornare un singolo valore computato invece di un intero blocco css
@function dynamicHeight($height, $padding) {
  @return $height - $padding;
}

.function-ex {
  width: 100px;
  display: inline-block;
  // verranno utilizzate al posto del valore di una propriet√†
  height: dynamicHeight(300px, 20px);
  background-color: black;
  vertical-align: bottom;
  padding: 20px;
}

.function-ex2 {
  min-height: dynamicHeight(150px, 50px);
  width: 100px;
  display: inline-block;
  background-color: black;
  vertical-align: bottom;
  padding: 20px;
}
